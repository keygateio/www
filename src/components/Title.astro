---
type Props = { messages: string[] };
const { messages } = Astro.props;
---

<span class="__dynamic-message" data-messages={JSON.stringify(messages)}>
</span>

<script>
  const timeout = (ms: number) =>
    new Promise((resolve) => setTimeout(resolve, ms));
  document.addEventListener("DOMContentLoaded", async () => {
    let currentIndex: number = 0;
    const textTarget: HTMLElement | null =
      document.querySelector(".__dynamic-message");

    if (!textTarget) {
      console.error("Element not found");
      return;
    }

    const strings: string[] = JSON.parse(
      textTarget.getAttribute("data-messages") || "[]"
    );

    const colors = ["#e44d26", "#f16529", "#3eb489", "#8a4fcc", "#6da7de"];

    const updateColor = (index: number) => {
      const effectiveIndex = (2 * (index + 1)) % colors.length;
      const color1 = colors[effectiveIndex];
      const color2 = colors[(effectiveIndex + 2) % colors.length];
      textTarget.style.background = `linear-gradient(to right, ${color1}, ${color2})`;
      textTarget.style.backgroundClip = "text";
      textTarget.style.webkitBackgroundClip = "text";
      textTarget.style.color = "transparent";
    };

    while (true) {
      textTarget.textContent = strings[1];
      updateColor(currentIndex);
      textTarget.textContent = strings[currentIndex];

      textTarget.classList.remove("animate");
      await timeout(2000);
      textTarget.classList.add("animate");
      await timeout(300);
      currentIndex = (currentIndex + 1) % strings.length;
    }
  });
</script>

<style>
  .__dynamic-message {
    display: inline-block;
    width: 100%;
    height: 1lh;
    opacity: 1;
    transform: translateY(0);
    transition:
      opacity 0.5s cubic-bezier(0.4, 0, 0.2, 1),
      transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .__dynamic-message.animate {
    opacity: 0;
    transform: translateY(-10px);
  }
</style>
